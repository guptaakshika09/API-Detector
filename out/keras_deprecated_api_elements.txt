deprecated_internal_set_learning_phase(): ~a deprecated internal implementation of set_learning_phase. this method is an internal-only version of `set_learning_phase` that does not raise a deprecation error. it is required because saved_model needs to keep working with user code that uses the deprecated learning phase methods until those apis are fully removed from the public api. but, we don't want to raise deprecation warnings for users when savedmodel sets learning phase just for compatibility with code that relied on explicitly setting the learning phase for other values.
deprecated_internal_learning_phase_scope(): ~unlike the public method, this method does not raise a deprecation warning. this is needed because saved model saving needs to set learning phase to maintain compatibility with code that sets/gets the learning phase, but saved model saving itself shouldn't raise a deprecation warning.
random_binomial(): ~deprecated, use `tf.keras.backend.random_bernoulli` instead.
BackupAndRestoreExperimental: ~deprecated. please use `tf.keras.callbacks.backupandrestore` instead. caution: `tf.keras.callbacks.experimental.backupandrestore` endpoint is deprecated and will be removed in a future release. please use `tf.keras.callbacks.backupandrestore`.
SidecarEvaluatorExperimental: ~deprecated. please use `tf.keras.utils.sidecarevaluator` instead. caution: `tf.keras.experimental.sidecarevaluator` endpoint is deprecated and will be removed in a future release. please use `tf.keras.utils.sidecarevaluator`.
add_loss(): ~args: losses: loss tensor, or list/tuple of tensors. rather than tensors, losses may also be zero-argument callables which create a loss tensor. **kwargs: additional keyword arguments for backward compatibility. accepted values: inputs - deprecated, will be automatically inferred.
add_update(): ~args: updates: update op, or list/tuple of update ops, or zero-arg callable that returns an update op. a zero-arg callable should be passed in order to disable running the updates by setting `trainable=false` on this layer, when executing in eager mode. inputs: deprecated, will be automatically inferred.
get_updates_for(): ~deprecated, do not use!
get_losses_for(): ~deprecated, do not use!
inbound_nodes(): ~deprecated, do not use! only for compatibility with external keras.
outbound_nodes(): ~deprecated, do not use! only for compatibility with external keras.
apply(): ~deprecated, do not use!
add_variable(): ~deprecated, do not use! alias for `add_weight`.
_compute_dtype(): ~deprecated alias of `compute_dtype`.
add_update(): ~args: updates: update op, or list/tuple of update ops, or zero-arg callable that returns an update op. a zero-arg callable should be passed in order to disable running the updates by setting `trainable=false` on this layer, when executing in eager mode. inputs: deprecated, will be automatically inferred.
inbound_nodes(): ~deprecated, do not use! only for compatibility with external keras.
outbound_nodes(): ~deprecated, do not use! only for compatibility with external keras.
apply(): ~deprecated, do not use!
add_variable(): ~deprecated, do not use! alias for `add_weight`.
Input(): ~args: shape: a shape tuple (integers), not including the batch size. for instance, `shape=(32,)` indicates that the expected input will be batches of 32-dimensional vectors. elements of this tuple can be none; 'none' elements represent dimensions where the shape is not known. batch_size: optional static batch size (integer). name: an optional name string for the layer. should be unique in a model (do not reuse the same name twice). it will be autogenerated if it isn't provided. dtype: the data type expected by the input, as a string (`float32`, `float64`, `int32`...) sparse: a boolean specifying whether the placeholder to be created is sparse. only one of 'ragged' and 'sparse' can be true. note that, if `sparse` is false, sparse tensors can still be passed into the input - they will be densified with a default value of 0. tensor: optional existing tensor to wrap into the `input` layer. if set, the layer will use the `tf.typespec` of this tensor rather than creating a new placeholder tensor. ragged: a boolean specifying whether the placeholder to be created is ragged. only one of 'ragged' and 'sparse' can be true. in this case, values of 'none' in the 'shape' argument represent ragged dimensions. for more information about raggedtensors, see [this guide](https://www.tensorflow.org/guide/ragged_tensors). type_spec: a `tf.typespec` object to create the input placeholder from. when provided, all other args except name must be none. **kwargs: deprecated arguments support. supports `batch_shape` and `batch_input_shape`.
fit_generator(): ~deprecated: `model.fit` now supports generators, so there is no longer any need to use this endpoint.
evaluate_generator(): ~deprecated: `model.evaluate` now supports generators, so there is no longer any need to use this endpoint.
predict_generator(): ~deprecated: `model.predict` now supports generators, so there is no longer any need to use this endpoint.
state_updates(): ~deprecated, do not use!
fit_generator(): ~deprecated: `model.fit` now supports generators, so there is no longer any need to use this endpoint.
evaluate_generator(): ~deprecated: `model.evaluate` now supports generators, so there is no longer any need to use this endpoint.
predict_generator(): ~deprecated: `model.predict` now supports generators, so there is no longer any need to use this endpoint.
DenseFeatures: ~this is the v1 version of this layer that uses variable_scope's or partitioner to create variables which works well with partitionedvariables. variable scopes are deprecated in v2, so the v2 version uses name_scopes instead. but currently that lacks support for partitioned variables. use this if you need partitioned variables. use the partitioner argument if you have a keras model and uses `tf.compat.v1.keras.estimator.model_to_estimator` for training.
BasicLSTMCell: ~deprecated: please use `tf.compat.v1.nn.rnn_cell.lstmcell` instead.~args: num_units: int, the number of units in the lstm cell. forget_bias: float, the bias added to forget gates (see above). must set to `0.0` manually when restoring from cudnnlstm-trained checkpoints. state_is_tuple: if true, accepted and returned states are 2-tuples of the `c_state` and `m_state`. if false, they are concatenated along the column axis. the latter behavior will soon be deprecated. activation: activation function of the inner states. default: `tanh`. it could also be string that is within keras activation function names. reuse: (optional) python boolean describing whether to reuse variables in an existing scope. if not `true`, and the existing scope already has the given variables, an error is raised. name: string, the name of the layer. layers with the same name will share weights, but to avoid mistakes we require reuse=true in such cases. dtype: default dtype of the layer (default of `none` means use the type of the first input). required when `build` is called before `call`. **kwargs: dict, keyword named properties for common layer attributes, like `trainable` etc when constructing the cell from configs of get_config(). when restoring from cudnnlstm-trained checkpoints, must use `cudnncompatiblelstmcell` instead.
legacy_rnn: ~args: cells: list of rnncells that will be composed in this order. state_is_tuple: if true, accepted and returned states are n-tuples, where `n = len(cells)`. if false, the states are all concatenated along the column axis. this latter behavior will soon be deprecated.
LSTMCell: ~args: num_units: int, the number of units in the lstm cell. use_peepholes: bool, set true to enable diagonal/peephole connections. cell_clip: (optional) a float value, if provided the cell state is clipped by this value prior to the cell output activation. initializer: (optional) the initializer to use for the weight and projection matrices. num_proj: (optional) int, the output dimensionality for the projection matrices. if none, no projection is performed. proj_clip: (optional) a float value. if `num_proj > 0` and `proj_clip` is provided, then the projected values are clipped elementwise to within `[-proj_clip, proj_clip]`. num_unit_shards: deprecated, will be removed by jan. 2017. use a variable_scope partitioner instead. num_proj_shards: deprecated, will be removed by jan. 2017. use a variable_scope partitioner instead. forget_bias: biases of the forget gate are initialized by default to 1 in order to reduce the scale of forgetting at the beginning of the training. must set it manually to `0.0` when restoring from cudnnlstm trained checkpoints. state_is_tuple: if true, accepted and returned states are 2-tuples of the `c_state` and `m_state`. if false, they are concatenated along the column axis. this latter behavior will soon be deprecated. activation: activation function of the inner states. default: `tanh`. it could also be string that is within keras activation function names. reuse: (optional) python boolean describing whether to reuse variables in an existing scope. if not `true`, and the existing scope already has the given variables, an error is raised. name: string, the name of the layer. layers with the same name will share weights, but to avoid mistakes we require reuse=true in such cases. dtype: default dtype of the layer (default of `none` means use the type of the first input). required when `build` is called before `call`. **kwargs: dict, keyword named properties for common layer attributes, like `trainable` etc when constructing the cell from configs of get_config(). when restoring from cudnnlstm-trained checkpoints, use `cudnncompatiblelstmcell` instead.
MultiRNNCell: ~args: cells: list of rnncells that will be composed in this order. state_is_tuple: if true, accepted and returned states are n-tuples, where `n = len(cells)`. if false, the states are all concatenated along the column axis. this latter behavior will soon be deprecated.
true_dtype(): ~deprecated alias of `dtype`.
get_layer_policy(): ~warning: this function is deprecated. use `tf.keras.layers.layer.dtype_policy` instead.
LossScaleOptimizerV1: ~an deprecated optimizer that applies loss scaling. warning: this class is deprecated and will be removed in a future version of tensorflow. please use the non-experimental class `tf.keras.mixed_precision.lossscaleoptimizer` instead. this class is identical to the non-experimental `keras.mixed_precision.lossscaleoptimizer` except its constructor takes different arguments. for this class (the experimental version), the constructor takes a `loss_scale` argument. for the non-experimental class, the constructor encodes the loss scaling information in multiple arguments. note that unlike this class, the non-experimental class does not accept a `tf.compat.v1.mixed_precision.lossscale`, which is deprecated.
PolicyV1: ~a deprecated dtype policy for a keras layer. warning: this class is now deprecated and will be removed soon. please use the non-experimental class `tf.keras.mixed_precision.policy` instead.
load_img(): ~args: path: path to image file. grayscale: deprecated use `color_mode="grayscale"`. color_mode: one of "grayscale", "rgb", "rgba". default: "rgb". the desired image format. target_size: either `none` (default to original size) or tuple of ints `(img_height, img_width)`. interpolation: interpolation method used to resample the image if the target size is different from that of the loaded image. supported methods are "nearest", "bilinear", and "bicubic". if pil version 1.1.3 or newer is installed, "lanczos" is also supported. if pil version 3.4.0 or newer is installed, "box" and "hamming" are also supported. by default, "nearest" is used.
flow_from_dataframe(): ~args: dataframe: pandas dataframe containing the filepaths relative to `directory` (or absolute paths if `directory` is none) of the images in a string column. it should include other column/s depending on the `class_mode`: - if `class_mode` is `"categorical"` (default value) it must include the `y_col` column with the class/es of each image. values in column can be string/list/tuple if a single class or list/tuple if multiple classes. - if `class_mode` is `"binary"` or `"sparse"` it must include the given `y_col` column with class values as strings. - if `class_mode` is `"raw"` or `"multi_output"` it should contain the columns specified in `y_col`. - if `class_mode` is `"input"` or `none` no extra column is needed. directory: string, path to the directory to read images from. if `none`, data in `x_col` column should be absolute paths. x_col: string, column in `dataframe` that contains the filenames (or absolute paths if `directory` is `none`). y_col: string or list, column/s in `dataframe` that has the target data. weight_col: string, column in `dataframe` that contains the sample weights. default: `none`. target_size: tuple of integers `(height, width)`, default: `(256, 256)`. the dimensions to which all images found will be resized. color_mode: one of "grayscale", "rgb", "rgba". default: "rgb". whether the images will be converted to have 1 or 3 color channels. classes: optional list of classes (e.g. `['dogs', 'cats']`). default is none. if not provided, the list of classes will be automatically inferred from the `y_col`, which will map to the label indices, will be alphanumeric). the dictionary containing the mapping from class names to class indices can be obtained via the attribute `class_indices`. class_mode: one of "binary", "categorical", "input", "multi_output", "raw", sparse" or none. default: "categorical". mode for yielding the targets: - `"binary"`: 1d numpy array of binary labels, - `"categorical"`: 2d numpy array of one-hot encoded labels. supports multi-label output. - `"input"`: images identical to input images (mainly used to work with autoencoders), - `"multi_output"`: list with the values of the different columns, - `"raw"`: numpy array of values in `y_col` column(s), - `"sparse"`: 1d numpy array of integer labels, - `none`, no targets are returned (the generator will only yield batches of image data, which is useful to use in `model.predict()`). batch_size: size of the batches of data (default: 32). shuffle: whether to shuffle the data (default: true) seed: optional random seed for shuffling and transformations. save_to_dir: none or str (default: none). this allows you to optionally specify a directory to which to save the augmented pictures being generated (useful for visualizing what you are doing). save_prefix: str. prefix to use for filenames of saved pictures (only relevant if `save_to_dir` is set). save_format: one of "png", "jpeg", "bmp", "pdf", "ppm", "gif", "tif", "jpg" (only relevant if `save_to_dir` is set). default: "png". subset: subset of data (`"training"` or `"validation"`) if `validation_split` is set in `imagedatagenerator`. interpolation: interpolation method used to resample the image if the target size is different from that of the loaded image. supported methods are `"nearest"`, `"bilinear"`, and `"bicubic"`. if pil version 1.1.3 or newer is installed, `"lanczos"` is also supported. if pil version 3.4.0 or newer is installed, `"box"` and `"hamming"` are also supported. by default, `"nearest"` is used. validate_filenames: boolean, whether to validate image filenames in `x_col`. if `true`, invalid images will be ignored. disabling this option can lead to speed-up in the execution of this function. defaults to `true`. **kwargs: legacy arguments for raising deprecation warnings.
get_file(): ~args: fname: name of the file. if an absolute path `/path/to/file.txt` is specified the file will be saved at that location. if `none`, the name of the file at `origin` will be used. origin: original url of the file. untar: deprecated in favor of `extract` argument. boolean, whether the file should be decompressed md5_hash: deprecated in favor of `file_hash` argument. md5 hash of the file for verification file_hash: the expected hash string of the file after download. the sha256 and md5 hash algorithms are both supported. cache_subdir: subdirectory under the keras cache dir where the file is saved. if an absolute path `/path/to/folder` is specified the file will be saved at that location. hash_algorithm: select the hash algorithm to verify the file. options are `'md5'`, `'sha256'`, and `'auto'`. the default 'auto' detects the hash algorithm in use. extract: true tries extracting the file as an archive, like tar or zip. archive_format: archive format to try for extracting the file. options are `'auto'`, `'tar'`, `'zip'`, and `none`. `'tar'` includes tar, tar.gz, and tar.bz files. the default `'auto'` corresponds to `['tar', 'zip']`. none or an empty list will return no matches found. cache_dir: location to store cached files, when none it defaults to the default directory `~/.keras/`.
KerasClassifier: ~deprecated. use [sci-keras](https://github.com/adriangb/scikeras) instead. see https://www.adriangb.com/scikeras/stable/migration.html for help migrating.
KerasRegressor: ~deprecated. use [sci-keras](https://github.com/adriangb/scikeras) instead. see https://www.adriangb.com/scikeras/stable/migration.html for help migrating.
