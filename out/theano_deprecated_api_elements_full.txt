theano.Param: ~deprecated. use in instead., ./theano/compile/pfunc.py
theano.PreserveNames: ~deprecated. we need to keep it to allow unpickling., ./theano/gof/toolbox.py
theano.deprecated(): ~ @deprecated('myfile', 'do something different...') def fn_name(...) ... warning myfile.fn_name deprecated. do something different..., ./theano/gof/utils.py
theano.give_variables_names(): @deprecated. # Use a_theano_variable.auto_name instead, ./theano/gof/utils.py
theano.GpuDnnPoolDesc: ~parameters ---------- ws : tuple window size. stride : tuple (dx, dy) or (dx, dy, dz). mode : {'max', 'average_inc_pad', 'average_exc_pad'} the old deprecated name 'average' corresponds to 'average_inc_pad'. pad : tuple (padx, pady) or (padx, pady, padz), ./theano/gpuarray/dnn.py
theano.GpuDnnPool: ~parameters ---------- img : tensor the image 4d or 5d tensor. ws : tensor window size. stride : tensor (dx, dy) or (dx, dy, dz). mode : {'max', 'average_inc_pad', 'average_exc_pad'} the old deprecated name 'average' corresponds to 'average_inc_pad'. pad : tensor (padx, pady) or (padx, pady, padz), ./theano/gpuarray/dnn.py
theano.GpuDnnPoolGrad: ~parameters ---------- inp the input of the pooling. out the output of the pooling in the forward. out_grad same size as out, but is the corresponding gradient information. ws : tensor variable window size. stride : tensor variable (dx, dy) or (dx, dy, dz). mode : {'max', 'average_inc_pad', 'average_exc_pad'} the old deprecated name 'average' corresponds to 'average_inc_pad'. pad : tensor (padx, pady) or (padx, pady, padz), ./theano/gpuarray/dnn.py
theano.dnn_conv(): ~parameters ---------- img images to do the convolution over. kerns convolution filters. border_mode one of 'valid', 'full', 'half'; additionally, the padding size could be directly specified by an integer or a pair of integers. subsample perform subsampling of the output (default: (1, 1)). dilation filter dilation factor. a dilation factor of d is equivalent to a convolution with d - 1 zeros inserted between neighboring filter values. conv_mode perform convolution (kernels flipped) or cross-correlation. one of 'conv', 'cross' (default: 'conv'). direction_hint used by graph optimizers to change algorithm choice. by default, gpudnnconv will be used to carry out the convolution. if border_mode is 'valid', subsample is (1, 1), dilation is (1, 1), and direction_hint is 'bprop weights', it will use gpudnnconvgradw. if border_mode is 'full', subsample is (1, 1), dilation is (1, 1), and direction_hint is *not* 'forward!', it will use gpudnnconvgradi. this parameter is used internally by graph optimizers and may be removed at any time without a deprecation period. you have been warned. algo : {'none', 'small', 'large', 'fft', 'guess_once', 'guess_on_shape_change', 'time_once', 'time_on_shape_change'} convolution implementation to use. some of its values may require certain versions of cudnn to be installed. default is the value of :attr:`config.dnn.conv.algo_fwd`. precision : {'as_input_f32', 'as_input', 'float16', 'float32', 'float64'} description of the dtype in which the computation of the convolution should be done. possible values are 'as_input', 'float16', 'float32' and 'float64'. default is the value of :attr:`config.dnn.conv.precision`. num_groups : divides the image, kernel and output tensors into num_groups separate groups. each which carry out convolutions separately, ./theano/gpuarray/dnn.py
theano.dnn_conv3d(): ~parameters ---------- img images to do the convolution over. kerns convolution filters. border_mode one of 'valid', 'full', 'half'; additionally, the padding size could be directly specified by an integer or a pair of integers. subsample perform subsampling of the output (default: (1, 1, 1)). dilation filter dilation factor. a dilation factor of d is equivalent to a convolution with d - 1 zeros inserted between neighboring filter values. conv_mode perform convolution (kernels flipped) or cross-correlation. one of 'conv', 'cross' (default: 'conv'). direction_hint used by graph optimizers to change algorithm choice. by default, gpudnnconv will be used to carry out the convolution. if border_mode is 'valid', subsample is (1, 1, 1), dilation is (1, 1, 1), and direction_hint is 'bprop weights', it will use gpudnnconvgradw. if border_mode is 'full', subsample is (1, 1, 1), dilation is (1, 1, 1), and direction_hint is *not* 'forward!', it will use gpudnnconvgradi. this parameter is used internally by graph optimizers and may be removed at any time without a deprecation period. you have been warned. algo : convolution implementation to use. only 'none' is implemented for the conv3d. default is the value of :attr:`config.dnn.conv.algo_fwd`. precision : {'as_input_f32', 'as_input', 'float16', 'float32', 'float64'} description of the dtype in which the computation of the convolution should be done. possible values are 'as_input', 'float16', 'float32' and 'float64'. default is the value of :attr:`config.dnn.conv.precision`. num_groups : divides the image, kernel and output tensors into num_groups separate groups. each which carry out convolutions separately, ./theano/gpuarray/dnn.py
theano.consider_constant(): ~deprecated: use zero_grad() or disconnected_grad() instead., ./theano/gradient.py
theano.clone(): ~parameters ---------- output : theano variables (or theano expressions) theano expression that represents the computational graph. replace : dict dictionary describing which subgraphs should be replaced by what. share_inputs : bool if true, use the same inputs (and shared variables) as the original graph. if false, clone them. note that cloned shared variables still use the same underlying storage, so they will always have the same value. copy_inputs deprecated, use share_inputs., ./theano/scan_module/scan_utils.py
theano.Flatten: ~.. note:: the interface flatten(op) is deprecated, you should use flatten., ./theano/tensor/basic.py
theano.Tile: ~.. note:: deprecated use tile() instead., ./theano/tensor/basic.py
theano.stack(): ~note: the interface stack(*tensors) is deprecated, you should use stack(tensors, axis=0) insted., ./theano/tensor/basic.py
theano.flatten(): ~ ndim : int the number of dimensions of the returned variable default 1. outdim : int deprecated synonym for ndim returns ------- theano.tensor.var.tensorvariable the flattend variable with dimensionality of outdim, ./theano/tensor/basic.py
theano.AllocDiag.make_node():  warn - DeprecationWarning: theano.tensor.nlinalg.AllocDiagis deprecated, please use theano.tensor.AllocDiaginstead.DeprecationWarning, ./theano/tensor/nlinalg.py
theano.nnet.conv2d(): ~deprecated, old conv2d interface. this function will build the symbolic graph for convolving a stack of input images with a set of filters. the implementation is modelled after convolutional neural networks (cnn). it is simply a wrapper to the convop but provides a much cleaner interface., ./theano/tensor/nnet/conv.py
theano.nnet.conv2d(): ~image_shape: none, tuple/list of len 4 of int or constant variable deprecated alias for input_shape., ./theano/tensor/nnet/__init__.py
theano.random_integers_helper(): ~since random_integers is deprecated it calls randint() instead., ./theano/tensor/raw_random.py
theano.signal.Pool: ~parameters ---------- ws : list or tuple of n ints downsample factor over rows, columns etc. ws indicates the size of the pooling region. ignore_border : bool if ws doesn't divide imgshape, do we include an extra row/col/slice of partial downsampling (false) or ignore it (true). stride : list or tuple of n ints or none stride size, which is the number of shifts over rows/cols/slices to get the next pool region. if stride is none, it is considered equal to ws (no overlap on pooling regions). pad : tuple of n ints or none for each downsampling dimension, this specifies the number of zeros to add as padding on both sides. for 2d and (pad_h, pad_w), pad_h specifies the size of the top and bottom margins, pad_w specifies the size of the left and right margins. no padding is added if pad is none. mode : {'max', 'sum', 'average_inc_pad', 'average_exc_pad'} ('average_inc_pad' excludes the padding from the count, 'average_exc_pad' include it) ndim : int the number of pooling dimensions n. the default is 2. ds *deprecated*, use parameter ws instead. st *deprecated*, use parameter st instead. padding *deprecated*, use parameter pad instead., ./theano/tensor/signal/pool.py
theano.signal.pool_2d(): ~parameters ---------- input : n-d theano tensor of input images input images. max pooling will be done over the 2 last dimensions. ws : tuple of length 2 or theano vector of ints of size 2. factor by which to downscale (vertical ws, horizontal ws). (2,2) will halve the image in each dimension. ignore_border : bool (default none, will print a warning and set to false) when true, (5,5) input with ws=(2,2) will generate a (2,2) output. (3,3) otherwise. stride : tuple of two ints or theano vector of ints of size 2. stride size, which is the number of shifts over rows/cols to get the next pool region. if stride is none, it is considered equal to ws (no overlap on pooling regions), eg: stride=(1,1) will shifts over one row and one col for every iteration. pad : tuple of two ints or theano vector of ints of size 2. (pad_h, pad_w), pad zeros to extend beyond four borders of the images, pad_h is the size of the top and bottom margins, and pad_w is the size of the left and right margins. mode : {'max', 'sum', 'average_inc_pad', 'average_exc_pad'} operation executed on each window. `max` and `sum` always exclude the padding in the computation. `average` gives you the choice to include or exclude it. ds *deprecated*, use parameter ws instead. st *deprecated*, use parameter stride instead. padding *deprecated*, use parameter pad instead., ./theano/tensor/signal/pool.py
theano.signal.pool_3d(): ~parameters ---------- input : n-d theano tensor of input images input images. max pooling will be done over the 3 last dimensions. ws : tuple of length 3 or theano vector of ints of size 3 factor by which to downscale (vertical ws, horizontal ws, depth ws). (2,2,2) will halve the image in each dimension. ignore_border : bool (default none, will print a warning and set to false) when true, (5,5,5) input with ws=(2,2,2) will generate a (2,2,2) output. (3,3,3) otherwise. st : tuple of three ints or theano vector of ints of size 3 stride size, which is the number of shifts over rows/cols/slices to get the next pool region. if st is none, it is considered equal to ws (no overlap on pooling regions). pad : tuple of two ints or theano vector of ints of size 3 (pad_h, pad_w, pad_d), pad zeros to extend beyond six borders of the images, pad_h is the size of the top and bottom margins, pad_w is the size of the left and right margins, and pad_d is the size of the front and back margins mode : {'max', 'sum', 'average_inc_pad', 'average_exc_pad'} operation executed on each window. `max` and `sum` always exclude the padding in the computation. `average` gives you the choice to include or exclude it. ds *deprecated*, use parameter ws instead. st *deprecated*, use parameter st instead. padding *deprecated*, use parameter pad instead., ./theano/tensor/signal/pool.py
theano.signal.Pool.out_shape(): ~parameters ---------- imgshape : tuple, list, or similar of integer or scalar theano variable the shape of a tensor of images. the last n elements are interpreted as the number of rows, and the number of cols. ws : list or tuple of n ints downsample factor over rows and column. ws indicates the pool region size. ignore_border : bool if ws doesn't divide imgshape, do we include an extra row/col/slice of partial downsampling (false) or ignore it (true). stride : list or tuple of n ints or none stride size, which is the number of shifts over rows/cols/slices to get the next pool region. if stride is none, it is considered equal to ws (no overlap on pooling regions). pad : tuple of n ints or none for each downsampling dimension, this specifies the number of zeros to add as padding on both sides. for 2d and (pad_h, pad_w), pad_h specifies the size of the top and bottom margins, pad_w specifies the size of the left and right margins. no padding is added if pad is none. ndim : int the number of pooling dimensions n. the default is 2. ds *deprecated*, use parameter ws instead. st *deprecated*, use parameter st instead. padding *deprecated*, use parameter pad instead., ./theano/tensor/signal/pool.py
theano.signal.PoolGrad.out_shape(): ~parameters ---------- imgshape : tuple of integers or scalar theano variables the shape of a tensor of images. the last n elements are interpreted as the downsampling dimensions. ws : tuple of n ints downsample factor over rows and columns this parameter indicates the size of the pooling region ignore_border : bool if ws doesn't divide imgshape, do we include an extra row/col/slice of partial downsampling (false) or ignore it (true). stride : list or tuple of n ints or none stride size, which is the number of shifts over rows/cols/slices to get the next pool region. if stride is none, it is considered equal to ws (no overlap on pooling regions). pad : tuple of n ints or none for each downsampling dimension, this specifies the number of zeros to add as padding on both sides. for 2d and (pad_h, pad_w), pad_h specifies the size of the top and bottom margins, pad_w specifies the size of the left and right margins. no padding is added if pad is none. ndim : int the number of pooling dimensions n. the default is 2. ds *deprecated*, use parameter ws instead. st *deprecated*, use parameter st instead. padding *deprecated*, use parameter pad instead., ./theano/tensor/signal/pool.py
